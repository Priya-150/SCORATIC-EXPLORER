<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Interactive Fraction Explorer</title>
    <!-- Chosen Palette: Cosmic Candy -->
    <!-- Application Structure Plan: A task-oriented design with two main "Missions" (Compare/Simplify and Add/Subtract) that users can toggle between. This structure guides students through specific learning objectives rather than just providing a generic tool. The layout is a three-column design: Mission controls on the left, a large central visualization panel, and a dynamic step-by-step explanation panel on the right. This was chosen to keep the user's focus clear: interact on the left, see the result in the middle, and understand the 'why' on the right. -->
    <!-- Visualization & Content Choices: Comparison uses side-by-side bar charts for clear magnitude difference. Simplification and Addition/Subtraction use a dynamic text panel to break down complex processes into simple, digestible steps, with the final result shown in pie and bar charts for visual reinforcement. All interactions are driven by buttons within the active "Mission," ensuring a clear user flow. -->
    <!-- CONFIRMATION: NO SVG graphics used. NO Mermaid JS used. -->
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/tone/14.7.77/Tone.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js@3.7.1/dist/chart.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2.0.0"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700;800&family=Roboto+Mono:wght@400;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background: #111827;
            color: #e5e7eb;
        }
        .mission-btn.active {
            background-color: #db2777;
            color: white;
        }
        .control-panel {
            background: rgba(31, 41, 55, 0.5);
            border: 1px solid rgba(75, 85, 99, 0.5);
        }
        .explanation-panel p {
            padding: 0.75rem;
            border-radius: 0.5rem;
            background: rgba(55, 65, 81, 0.3);
            border-left: 4px solid #db2777;
        }
        .chart-container {
            position: relative;
            width: 100%;
            max-width: 220px;
            height: 220px;
        }
        .modal {
            transition: opacity 0.3s, transform 0.3s;
        }
        .modal.hidden {
            opacity: 0;
            transform: scale(0.95);
            pointer-events: none;
        }
    </style>
</head>
<body class="min-h-screen flex flex-col">

    <!-- Header -->
    <header class="bg-gray-900/50 backdrop-blur-sm shadow-lg z-10 border-b border-gray-700">
        <div class="container mx-auto px-6 py-3 flex justify-between items-center">
            <h1 class="text-xl md:text-2xl font-bold text-white">ðŸš€ Interactive Fraction Explorer</h1>
            <button id="about-btn" class="text-gray-400 hover:text-white transition font-semibold">About</button>
        </div>
    </header>

    <!-- Main Content -->
    <main class="flex-grow container mx-auto p-4 grid grid-cols-1 lg:grid-cols-3 gap-4">
        <!-- Left Panel: Missions & Controls -->
        <div class="lg:col-span-1 flex flex-col gap-4">
            <!-- Mission Selector -->
            <div class="control-panel rounded-xl p-4">
                <h2 class="text-lg font-bold text-center mb-2 text-pink-400">CHOOSE YOUR MISSION</h2>
                <div class="grid grid-cols-2 gap-2">
                    <button id="mission1-btn" class="mission-btn active w-full py-2 px-4 rounded-lg bg-gray-700 hover:bg-gray-600 transition">Compare & Simplify</button>
                    <button id="mission2-btn" class="mission-btn w-full py-2 px-4 rounded-lg bg-gray-700 hover:bg-gray-600 transition">Add & Subtract</button>
                </div>
            </div>

            <!-- Mission 1: Compare & Simplify Controls -->
            <div id="mission1-controls" class="control-panel rounded-xl p-4 flex flex-col gap-4">
                <h3 class="font-bold text-center text-lg">Mission 1: Compare & Simplify</h3>
                <div class="space-y-2">
                    <p class="font-semibold">Fraction to Simplify</p>
                    <div class="flex items-center gap-2">
                        <input type="number" id="s_num" placeholder="N" class="bg-gray-900 w-full p-2 rounded-md border border-gray-600">
                        <span class="font-bold">/</span>
                        <input type="number" id="s_den" placeholder="D" class="bg-gray-900 w-full p-2 rounded-md border border-gray-600">
                    </div>
                    <button id="simplify-btn" class="w-full py-2 bg-pink-600 hover:bg-pink-700 rounded-lg">Simplify & Visualize</button>
                </div>
                <hr class="border-gray-600"/>
                <div class="space-y-2">
                    <p class="font-semibold">Compare Two Fractions</p>
                    <div class="flex items-center gap-2">
                        <input type="number" id="c_num1" placeholder="N1" class="bg-gray-900 w-full p-2 rounded-md border border-gray-600">
                        <span class="font-bold">/</span>
                        <input type="number" id="c_den1" placeholder="D1" class="bg-gray-900 w-full p-2 rounded-md border border-gray-600">
                        <span class="font-bold text-2xl text-pink-400">vs</span>
                        <input type="number" id="c_num2" placeholder="N2" class="bg-gray-900 w-full p-2 rounded-md border border-gray-600">
                        <span class="font-bold">/</span>
                        <input type="number" id="c_den2" placeholder="D2" class="bg-gray-900 w-full p-2 rounded-md border border-gray-600">
                    </div>
                    <button id="compare-btn" class="w-full py-2 bg-pink-600 hover:bg-pink-700 rounded-lg">Compare</button>
                </div>
            </div>

            <!-- Mission 2: Add & Subtract Controls -->
            <div id="mission2-controls" class="control-panel rounded-xl p-4 flex-col gap-4 hidden">
                 <h3 class="font-bold text-center text-lg">Mission 2: Add & Subtract</h3>
                 <div class="flex items-center gap-2">
                    <input type="number" id="a_num1" placeholder="N1" class="bg-gray-900 w-full p-2 rounded-md border border-gray-600">
                    <span class="font-bold">/</span>
                    <input type="number" id="a_den1" placeholder="D1" class="bg-gray-900 w-full p-2 rounded-md border border-gray-600">
                    <select id="operation-select" class="bg-gray-900 p-2 rounded-md border border-gray-600 text-pink-400 font-bold">
                        <option value="add">+</option>
                        <option value="subtract">-</option>
                    </select>
                    <input type="number" id="a_num2" placeholder="N2" class="bg-gray-900 w-full p-2 rounded-md border border-gray-600">
                    <span class="font-bold">/</span>
                    <input type="number" id="a_den2" placeholder="D2" class="bg-gray-900 w-full p-2 rounded-md border border-gray-600">
                </div>
                <button id="calculate-btn" class="w-full py-2 bg-pink-600 hover:bg-pink-700 rounded-lg">Calculate</button>
            </div>
        </div>

        <!-- Center Panel: Visualization -->
        <div class="lg:col-span-2 control-panel rounded-xl p-4 flex flex-col items-center justify-center gap-4">
            <div id="viz-title" class="text-xl font-bold text-center">Welcome to the Fraction Explorer!</div>
            <div id="charts-container" class="w-full flex-grow flex flex-wrap items-center justify-center gap-2">
                <!-- Visualizations will be dynamically added here -->
            </div>
        </div>
    </main>

    <!-- Right Panel: Explanation -->
    <aside id="explanation-panel" class="fixed right-0 top-0 h-full w-80 bg-gray-900/80 backdrop-blur-sm p-4 border-l border-gray-700 transform translate-x-full lg:translate-x-0 transition-transform z-20">
        <h2 class="text-xl font-bold text-pink-400 mb-4">How It Works</h2>
        <div id="explanation-content" class="space-y-3 text-gray-300">
            <p>Select a mission on the left to get started!</p>
        </div>
    </aside>

    <!-- About Modal -->
    <div id="about-modal" class="modal hidden fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50 p-4">
        <div class="bg-gray-800 p-8 rounded-2xl shadow-2xl text-white w-full max-w-lg relative border border-gray-700">
            <button id="close-modal-btn" class="absolute top-4 right-4 text-3xl text-gray-400 hover:text-white">&times;</button>
            <h2 class="text-3xl font-bold mb-4 text-pink-400">About This Explorer</h2>
            <p class="text-gray-300">This tool helps you understand fractions by showing them in a visual way. Perform different "missions" to learn about simplifying, comparing, adding, and subtracting fractions with clear, step-by-step explanations.</p>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // --- Sound Engine ---
            let synth, audioReady = false;
            async function initAudio() {
                if (audioReady) return;
                try {
                    await Tone.start();
                    synth = new Tone.Synth().toDestination();
                    audioReady = true;
                } catch (e) {
                    console.error("Could not start audio context", e);
                }
            }
            const playSound = (note) => { if (audioReady) synth.triggerAttackRelease(note, "8n", Tone.now()); };

            // --- DOM Elements ---
            const mission1Btn = document.getElementById('mission1-btn');
            const mission2Btn = document.getElementById('mission2-btn');
            const mission1Controls = document.getElementById('mission1-controls');
            const mission2Controls = document.getElementById('mission2-controls');
            const simplifyBtn = document.getElementById('simplify-btn');
            const compareBtn = document.getElementById('compare-btn');
            const calculateBtn = document.getElementById('calculate-btn');
            const vizTitle = document.getElementById('viz-title');
            const explanationContent = document.getElementById('explanation-content');
            const aboutBtn = document.getElementById('about-btn');
            const aboutModal = document.getElementById('about-modal');
            const closeModalBtn = document.getElementById('close-modal-btn');
            const chartsContainer = document.getElementById('charts-container');

            // --- Chart Setup ---
            Chart.register(ChartDataLabels);
            Chart.defaults.font.family = 'Inter';
            Chart.defaults.color = '#e5e7eb';

            function createChartSet(title) {
                const wrapper = document.createElement('div');
                wrapper.className = 'flex flex-col items-center';
                
                const titleEl = document.createElement('h3');
                titleEl.className = 'font-bold text-lg mb-2';
                titleEl.textContent = title;

                const pieContainer = document.createElement('div');
                pieContainer.className = 'chart-container';
                const pieCanvas = document.createElement('canvas');
                pieContainer.appendChild(pieCanvas);

                const barContainer = document.createElement('div');
                barContainer.className = 'chart-container';
                const barCanvas = document.createElement('canvas');
                barContainer.appendChild(barCanvas);

                wrapper.appendChild(titleEl);
                wrapper.appendChild(pieContainer);
                wrapper.appendChild(barContainer);
                chartsContainer.appendChild(wrapper);

                const pieChart = new Chart(pieCanvas.getContext('2d'), { type: 'pie', data: { datasets: [{ data: [1], backgroundColor: ['#4b5563'] }] }, options: { responsive: true, maintainAspectRatio: false, plugins: { legend: { display: false }, tooltip: { enabled: false } } } });
                const barChart = new Chart(barCanvas.getContext('2d'), { type: 'bar', data: { labels: [''], datasets: [] }, options: { indexAxis: 'y', responsive: true, maintainAspectRatio: false, scales: { x: { display: false, stacked: true }, y: { display: false, stacked: true } }, plugins: { legend: { display: false }, tooltip: { enabled: false } } } });
                
                return { wrapper, pieChart, barChart };
            }

            function updateChartSet(chartSet, num, den) {
                const { pieChart, barChart } = chartSet;
                const pieLabels = Array.from({ length: den }, (_, i) => i + 1);
                const colors = pieLabels.map((_, i) => i < num ? '#db2777' : '#4b5563');
                
                pieChart.data.labels = pieLabels;
                pieChart.data.datasets[0].data = Array(den).fill(1);
                pieChart.data.datasets[0].backgroundColor = colors;
                pieChart.data.datasets[0].borderColor = '#111827';
                pieChart.data.datasets[0].borderWidth = 4;
                pieChart.update();

                barChart.data.labels = [''];
                barChart.data.datasets = Array.from({ length: den }, (_, i) => ({ data: [1], backgroundColor: i < num ? '#db2777' : '#4b5563', borderColor: '#111827', borderWidth: 2 }));
                barChart.update();
            }
            
            function clearAllCharts() {
                chartsContainer.innerHTML = '';
            }

            // --- Math & Logic ---
            const gcd = (a, b) => b === 0 ? Math.abs(a) : gcd(b, a % b);
            const lcm = (a, b) => Math.abs(a * b) / gcd(a, b);

            function handleSimplify() {
                clearAllCharts();
                const num = parseInt(document.getElementById('s_num').value);
                const den = parseInt(document.getElementById('s_den').value);
                if (isNaN(num) || isNaN(den) || den <= 0) { alert("Please enter a valid fraction."); return; }
                
                const commonDivisor = gcd(num, den);
                const s_num = num / commonDivisor;
                const s_den = den / commonDivisor;
                
                const resultSet = createChartSet(Result: ${s_num}/${s_den});
                updateChartSet(resultSet, s_num, s_den);
                vizTitle.textContent = "Simplifying a Fraction";

                explanationContent.innerHTML = `
                    <p><strong>Simplifying ${num}/${den}:</strong></p>
                    <p>1. Find the Greatest Common Divisor (GCD) of ${num} and ${den}.</p>
                    <p>The GCD is <strong class="text-pink-400">${commonDivisor}</strong>.</p>
                    <p>2. Divide both numbers by the GCD.</p>
                    <p class="font-mono pl-2">${num} Ã· ${commonDivisor} = ${s_num}<br/>${den} Ã· ${commonDivisor} = ${s_den}</p>
                    <p>The simplified fraction is <strong class="text-pink-400">${s_num}/${s_den}</strong>!</p>
                `;
                playSound("C4");
            }

            function handleCompare() {
                clearAllCharts();
                const num1 = parseInt(document.getElementById('c_num1').value);
                const den1 = parseInt(document.getElementById('c_den1').value);
                const num2 = parseInt(document.getElementById('c_num2').value);
                const den2 = parseInt(document.getElementById('c_den2').value);
                if (isNaN(num1) || isNaN(den1) || isNaN(num2) || isNaN(den2) || den1 <= 0 || den2 <= 0) { alert("Please enter two valid fractions."); return; }

                const chartSet1 = createChartSet(${num1}/${den1});
                updateChartSet(chartSet1, num1, den1);

                const operatorEl = document.createElement('div');
                operatorEl.className = 'text-5xl font-bold text-pink-400 self-center mx-4';
                chartsContainer.appendChild(operatorEl);

                const chartSet2 = createChartSet(${num2}/${den2});
                updateChartSet(chartSet2, num2, den2);

                const val1 = num1 / den1;
                const val2 = num2 / den2;
                let resultText = '';
                let titleText = '';
                let symbol = '';

                if (val1 > val2) {
                    titleText = ${num1}/${den1} is Greater!;
                    symbol = '>';
                    resultText = <strong class="text-pink-400">${num1}/${den1}</strong> is LARGER than <strong class="text-pink-400">${num2}/${den2}</strong>.;
                } else if (val2 > val1) {
                    titleText = ${num2}/${den2} is Greater!;
                    symbol = '<';
                    resultText = <strong class="text-pink-400">${num2}/${den2}</strong> is LARGER than <strong class="text-pink-400">${num1}/${den1}</strong>.;
                } else {
                    titleText = The Fractions are Equal!;
                    symbol = '=';
                    resultText = Both fractions are EQUAL!;
                }
                
                vizTitle.textContent = titleText;
                operatorEl.textContent = symbol;
                explanationContent.innerHTML = <p>${resultText}</p><p>To compare, you can turn them into decimals: ${num1}/${den1} is about ${val1.toFixed(2)}, and ${num2}/${den2} is about ${val2.toFixed(2)}.</p>;
                playSound("E4");
            }

            function handleCalculate() {
                clearAllCharts();
                const n1 = parseInt(document.getElementById('a_num1').value);
                const d1 = parseInt(document.getElementById('a_den1').value);
                const n2 = parseInt(document.getElementById('a_num2').value);
                const d2 = parseInt(document.getElementById('a_den2').value);
                const op = document.getElementById('operation-select').value;
                if (isNaN(n1) || isNaN(d1) || isNaN(n2) || isNaN(d2) || d1 <= 0 || d2 <= 0) { alert("Please enter two valid fractions."); return; }

                const chartSet1 = createChartSet(${n1}/${d1});
                updateChartSet(chartSet1, n1, d1);
                
                const operatorEl = document.createElement('div');
                operatorEl.className = 'text-5xl font-bold text-pink-400 self-center mx-4';
                operatorEl.textContent = op === 'add' ? '+' : '-';
                chartsContainer.appendChild(operatorEl);

                const chartSet2 = createChartSet(${n2}/${d2});
                updateChartSet(chartSet2, n2, d2);

                const commonDen = lcm(d1, d2);
                const new_n1 = n1 * (commonDen / d1);
                const new_n2 = n2 * (commonDen / d2);
                
                let resultN = op === 'add' ? new_n1 + new_n2 : new_n1 - new_n2;
                const commonDivisor = gcd(resultN, commonDen);
                const finalN = resultN / commonDivisor;
                const finalD = commonDen / commonDivisor;
                
                let explanationHTML = `
                    <p><strong>Calculating ${n1}/${d1} ${op === 'add' ? '+' : '-'} ${n2}/${d2}:</strong></p>
                    <p>1. Find a "common denominator," which is <strong class="text-pink-400">${commonDen}</strong>.</p>
                    <p>2. Convert each fraction:</p>
                    <p class="font-mono pl-2">${n1}/${d1} becomes ${new_n1}/${commonDen}<br/>${n2}/${d2} becomes ${new_n2}/${commonDen}</p>
                    <p>3. Now we can ${op}: <strong class="text-pink-400">${new_n1} ${op === 'add' ? '+' : '-'} ${new_n2} = ${resultN}</strong>.</p>
                    <p>The result is ${resultN}/${commonDen}, which simplifies to <strong class="text-pink-400">${finalN}/${finalD}</strong>!</p>
                `;

                const equalsEl = document.createElement('div');
                equalsEl.className = 'text-5xl font-bold text-pink-400 self-center mx-4';
                equalsEl.textContent = '=';
                chartsContainer.appendChild(equalsEl);
                
                if (finalN < 0) {
                    const resultSet = createChartSet(Result: ${finalN}/${finalD});
                    updateChartSet(resultSet, 0, 1);
                    explanationHTML += <p class="mt-4">This result is negative and cannot be visualized here.</p>
                } else if (finalN > finalD) {
                    const whole = Math.floor(finalN / finalD);
                    const remainderN = finalN % finalD;
                    const resultSet = createChartSet(Result: ${whole} and ${remainderN}/${finalD});
                    updateChartSet(resultSet, remainderN, finalD);
                    explanationHTML += <p class="mt-4">This becomes the mixed number <strong class="text-pink-400">${whole} and ${remainderN}/${finalD}</strong>.</p>;
                } else {
                    const resultSet = createChartSet(Result: ${finalN}/${finalD});
                    updateChartSet(resultSet, finalN, finalD);
                }
                explanationContent.innerHTML = explanationHTML;
                vizTitle.textContent = "Calculation Result";
                playSound("G4");
            }

            // --- Event Listeners ---
            const userInteractionEvents = ['click', 'keydown', 'touchstart'];
            userInteractionEvents.forEach(evt => document.body.addEventListener(evt, initAudio, { once: true }));

            mission1Btn.addEventListener('click', () => {
                mission1Btn.classList.add('active');
                mission2Btn.classList.remove('active');
                mission1Controls.classList.remove('hidden');
                mission1Controls.classList.add('flex');
                mission2Controls.classList.add('hidden');
                mission2Controls.classList.remove('flex');
                playSound("A3");
            });
            mission2Btn.addEventListener('click', () => {
                mission2Btn.classList.add('active');
                mission1Btn.classList.remove('active');
                mission2Controls.classList.remove('hidden');
                mission2Controls.classList.add('flex');
                mission1Controls.classList.add('hidden');
                mission1Controls.classList.remove('flex');
                playSound("A3");
            });

            simplifyBtn.addEventListener('click', handleSimplify);
            compareBtn.addEventListener('click', handleCompare);
            calculateBtn.addEventListener('click', handleCalculate);
            aboutBtn.addEventListener('click', () => { playSound("B4"); aboutModal.classList.remove('hidden'); });
            closeModalBtn.addEventListener('click', () => { playSound("A3"); aboutModal.classList.add('hidden'); });

            // --- Init ---
            function initCharts() {
                const pieCtx = document.getElementById('pie-chart').getContext('2d');
                pieChart = new Chart(pieCtx, { type: 'pie', data: { datasets: [{ data: [1], backgroundColor: ['#4b5563'] }] }, options: { responsive: true, maintainAspectRatio: false, plugins: { legend: { display: false }, tooltip: { enabled: false } } } });
                const barCtx = document.getElementById('bar-chart').getContext('2d');
                barChart = new Chart(barCtx, { type: 'bar', data: { labels: [''], datasets: [] }, options: { indexAxis: 'y', responsive: true, maintainAspectRatio: false, scales: { x: { display: false, stacked: true }, y: { display: false, stacked: true } }, plugins: { legend: { display: false }, tooltip: { enabled: false } } } });
            }
            initCharts();
        });
    </script>
</body>
</html>
